h1. paginate

paginate (http://github.com/lmcalpin/Play--Paginate) is a replacement for the standard #{list/} Play! tag.

h2. Getting Started

To include paginate in an existing project add the following lines to your **conf/application.conf** file

bc. 
module.paginate=${play.path}/modules/paginate-head

h2. Using paginate

You can use paginate by creating an instance of a Paginator object.  Two are provided for you, though you can always create your own:

**play.modules.paginate.ModelPaginator** is used to paginate standard Play! JPA-based models.

bc. public static void index() {
      ModelPaginator paginator = new ModelPaginator(TheModel.class);
      render(paginator);
    }

**play.modules.paginate.ValuePaginator ** is used to wrap any existing List.

bc. public static void index() {
      List<T> realList = ...;
      ValuePaginator paginator = new ValuePaginator(realList);
      render(paginator);
    }

From your view, include the pagination list and controls:

bc. #{paginate.list items:paginator, as:'r'} 
    ... ${r} // or whatever 
    #{/paginate.list} 
    #{paginate.controls items:paginator /} 

If you would like to use the default stylesheet, include this somewhere in your layout:

bc. <link rel="stylesheet" type="text/css" media="screen" href="@{'/public/stylesheets/play-pagination.css'}"> 

If you would like to include a summary "Displaying rows X to Y", you may include the 
summary tag:

bc. #{paginate.summary items:paginator/}

h2. Customization

By default, a request parameter "page" is used to determine which page is being viewed in a paginated list.  If you would rather use an alternate name, you can customize this in your **conf/application.conf** file.

bc. paginator.parameter.name=__page

In addition, the Paginator classes expose properties that you can use to determine how many items are displayed per page, as well as how the controls will be displayed.  

- get/setBoundaryControlsEnabled: determines whether the First and Last buttons are displayed
- get/setPagesDisplayed: customizes the number of pages that show up between the forward/backward controls
- get/setPageSize: determines the number of rows we display per page

